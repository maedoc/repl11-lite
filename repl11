#!/usr/bin/env python

import os
import sys

# check hook name doesn't exist
hook_fname = 'r11'
if os.path.exists(hook_fname):
    print 'hook %r exists, not starting up...' % (hook_fname, )
    sys.exit(1)

# daemonize
if os.fork() > 0:
    sys.exit(0)

import time
import atexit

class CapturedOut(object):
    def __init__(self):
        self._text = ''

    def write(self, msg):
        self._text += msg

    @property
    def text(self):
        text = self._text
        self._text = ''
        return text

stdout, stderr = sys.stdout, sys.stderr
out = sys.stdout = sys.stderr = CapturedOut()
pid = os.getpid()

# set up logging
log_file = open('repl11-%d.log' % (pid, ), 'w')
def log(fmt, *args):
    if args:
        fmt %= args
    hdr = '[%s] '
    hdr %= time.asctime()
    log_file.write(hdr + fmt + '\n')
    log_file.flush()

# setup fifos
fifo_in = '.repl11-in.fifo'
fifo_out = '.repl11-out.fifo'
os.mkfifo(fifo_in)
os.mkfifo(fifo_out)

hook_source = """#!/usr/bin/env python

import sys

if len(sys.argv) > 1 and sys.argv[1] == 'quit':
    import os, signal
    os.kill({pid}, signal.SIGINT)
    sys.exit(0)

text = sys.stdin.read()

sys.stdout.write(text)

with open('{fin}', 'w') as fd:
    fd.write(text)

with open('{fout}', 'r') as fd:
    for line in fd.readlines():
        line = line.strip()
        if line:
            sys.stdout.write('# ' + line)
""".format(fin=fifo_in, fout=fifo_out, pid=pid)

with open(hook_fname, 'w') as fd:
    fd.write(hook_source)

os.chmod(hook_fname, 0o744)

# remember to clean them up at exit
@atexit.register
def unlink_fifos():
    os.unlink(fifo_in)
    os.unlink(fifo_out)
    os.unlink(hook_fname)
    log_file.close()
    os.unlink(log_file.name)

while True:
    log('reading from exec...')
    with open(fifo_in, 'r') as fd:
        source = fd.read()
    log('executing %r...', source[:20])
    try:
        exec source
    except Exception as exc:
        print('exception occurred: %r' % (exc,))
    result = out.text
    log('writing to result %r...', result[:20])
    with open(fifo_out, 'w') as fd:
        fd.write(result + '\n')
    log('results written.')

